GNL -> STRJOIN (NULL, LINE[FD])

INIT_STRUCT :
->inializar com 0's a struct; -> feito;

CHECK_MAP_NAME :
->pointeiro valido  -> feito
->falha abrir, fd (invalid fd) -> FEITO
-> ficheiro que nao seja .ber -> FEITO
->fechar fds -> feito

GET_LINES :
->ponteiro valido, ou struct -> feito
-> fd invalido, ou nenhum ->  feito
-> fd invalido em gnl -> feito
->fechar fds -> feito

GET_MAP :
->pointers validos -> feito
-> verificar altura (se for <= 0) da erro -> feito;
-> fd invalido -> feito
-> falha no malloc -> feito
-> fd invalido gnl -> feito 
-> Null pointer strdup -> feito;
-> diferenca de i(altura calculada no loop) para map.height -> feito

CHECK_VALID_MAP :
    -> checkar pointers validos -> leaks quando !data;
        possivel solucao (passar funcao para int);  -> FEITO ?            
        ->CHECK_FORMAT :
            ->pointers validos -> feito;
            -> enquanto i for menor que height -> feito
        -> VALID CHARS :
            -> checkar pointers validos -> feito;
        -> CHECK_WALLS :
            -> checkar pointers validos -> feito;
        -> CHECK_COLLECTIBLES :
            -> checkar pointers validos -> feito;
        -> CHECK_START_POS :
            -> checkar pointers validos -> feito;
        -> CHECK_EXIT :
            -> checkar pointers validos -> feito;

-> CHECK_VALID_PATH : -> COMENTAR FREE DO MAPA !!!!
            -> checkar pointers validos -> feito;
            ->checkar se a copia retorna null -> feito;
            ->checkat se flood_fill_map retorna erro -> feito;
                ->COPY_MAP :
                    -> ponteiros validos e altura valida -> feito;
                    -> falha malloc -> feito;
                ->FLOOD_FILL :
                    -> pointers válidos -> feito;
                    -> verificar se é wall ou se ja passou la (1 || 2) -> feito;
                    -> verificar se é collectible e decrementar caso seja -> feito;
                    -> verificar se é a saida, se for, return ; -> feito;
                    -> colocar 2 na posicao onde estamos (visitada)-> feito;
                    -> recursiva para y +/- 1 e x +/- 1 -> feito;

                ->CHECK_FLOOD_FILL :
                    -> caso os ponteiros nao sejam validos e haja masi que uma saida e 
                        collectibles != 0; -> feito;
                        ->free no mapa tempoorario e na struct toda; -> feito;
                    -> caso contrario free no mapa tempoorario -> feito;
                    ->DESCOMENTAR FREE DO MAPA !!!!

FT_STRDUP :
    -> ponteiros validos -> feito;
    ->falha malloc -> feito;
    -> passagem de invalid pointer p strdup -> feito

GNL :
    -> veificar strjoin(null, line[fd]) leaks -> por fazer -> quando malloc falhar retorna null e nao da leak, corrigir norma
        (possivel solucao):
            -> usar strdup quando !s1
            -> caso !s1 && !s2 retunr (NULL);
            -> caso !s2 dar free em s1 e retornar null;

ERRORS :
    ->EXIT_ERROR:
        ->pointers invalidos -> feito
            -> se a !struct, nao liberta memoria, escreve msg de erro ->feito;
            ->se !str, retorna uma msg de erro default;
        ->fechar fds -> feito;
        -> flag para verificar se ja levou free -> feito;
        -> free em map se a struct e map forem validos -> feito;
        -> caso nao tenha sido liberto, flag =  0, libertar struct -> feito;
        -> msg de erro personalizada -> feito;
        -> exit -> feito;

UTILS :
    -> CLOSE_FDS :
        -> i = 3 -> 1º fd disponivel -> feito;
    -> FREE_ARR :
        -> pointers validos -> feito;
        -> libertar enquanto i < height , verificar validade de arr -> feito;
        -> libertar arr -> feito;


STRUCT_PLAYER:
    -> int x -> linhas(width);
    -> int y -> altura(height);

STRUCT_MAP :
    -> exit_y = coordenada (altura) da saida;
    -> exit_x = coordenada (linha) da saida;

MELHORAR ESTRUTURA PLAYER, ACRESCENTAR COORDENADAS DE SAIDA ??? 

POR MELHORAR : 
->VALID_MAP; -> FEITO ??
    ->CHECK_FLOOD_FILL:
        ->DESCOMENTAR FREE DO MAPA !!!! 
GNL :
    -> veificar strjoin(null, line[fd]) leaks -> por fazer -> quando malloc falhar retorna null e nao da leak, corrigir norma


CORRIGIT CHECK_MAP_FORMAT quando o mapa nao acaba em quebra de linha